#!/bin/bash

SSHD_CONFIG="/etc/ssh/sshd_config"

APPLY_TO=""
AUTH_CONFIG=""

if [ $# -ne 2 ]; then
  echo "Usage: authConfig <applyTo> <authConfig>"
  echo "  - <applyTo>     Methods to change. Possible values: 'ALL', method name"
  echo "  - <authConfig>  Authentication mechanism. Possible values: 'NONE', 'PASSWORD', 'PUBLIC-KEY'"

  exit 1
fi;

APPLY_TO=$1
shift;

AUTH_CONFIG=$1

ALL_METHODS=$(cat /etc/passwd | egrep '[0-9]:666:' | awk -F':' '{ print $1}')

# Spliting auth config to support several methods specification
IFS=',' read -r -a APPLY_METHODS <<< "${AUTH_CONFIG}"

function updateSshdConfig(){
  METHOD=$1

  if [ "root" == $(echo "${METHOD}" | xargs) ]; then
    return
  fi

  # If method already exists, that block is replaced
  if [ -n "$(grep \"Match User $METHOD\" ${SSHD_CONFIG})"]; then

    # Removing existing block
    sed "#Match User $METHOD\n .*\n .*\n##g" ${SSHD_CONFIG} > /tmp/sshdConfig.
    mv /tmp/sshdConfig.tmp ${SSHD_CONFIG}

    # Appending new block
    echo "Match User ${METHOD}" >> ${SSHD_CONFIG}

    case "${AUTH_CONFIG}" in 
    ┆ NONE)
        echo " PermitEmptyPasswords yes" >> ${SSHD_CONFIG}
        echo " AuthenticationMethods 'password'" >> ${SSHD_CONFIG}
        echo " " >> ${SSHD_CONFIG}
        ;;
    ┆ PASSWORD)
        echo " AuthenticationMethods 'password'" >> ${SSHD_CONFIG}
        echo " " >> ${SSHD_CONFIG}
        echo " " >> ${SSHD_CONFIG}
        ;;
      PUBLIC-KEY)
        echo " AuthenticationMethods 'publickey'" >> ${SSHD_CONFIG}
        echo " " >> ${SSHD_CONFIG}
        echo " " >> ${SSHD_CONFIG}
        ;;
      *)
        ;;
    esac
  fi

}

for method in ${ALL_METHODS}; do
  # Trimming
  method=$(echo "${method}" | xargs)
  if [ ${method} == "ALL" ] || [[ ${APPLY_METHODS[${method}]} ]]; then
    updateSshdConfig ${method}
  fi
done
